--- linac/linac.orig	2022-07-19 09:31:22.195180000 +0200
+++ linac/linac	2022-07-19 10:11:57.435180000 +0200
@@ -22,25 +22,25 @@
   if [ -f "${config[config_path]}"/"${config[config_file]}" ]; then
     while read -r line
     do
-      if echo "$line" | grep -F = &>/dev/null
+      if @coreutils@/bin/echo "$line" | @gnugrep@/bin/grep -F = &>/dev/null
       then
-        varname=$(echo "$line" | cut -d '=' -f 1)
-        config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
+        varname=$(@coreutils@/bin/echo "$line" | @coreutils@/bin/cut -d '=' -f 1)
+        config[$varname]=$(@coreutils@/bin/echo "$line" | @coreutils@/bin/cut -d '=' -f 2-)
       fi
     done < "${config[config_path]}"/"${config[config_file]}"
   fi
 }
 CreateFiles() {
   if [ ! -d "${config[config_path]}" ]; then
-    mkdir "${config[config_path]}"
-    mkdir "${config[src_path]}"
-    mkdir "${config[build_path]}"
-    touch "${config[config_path]}"/"${config[config_file]}"
+    @coreutils@/bin/mkdir "${config[config_path]}"
+    @coreutils@/bin/mkdir "${config[src_path]}"
+    @coreutils@/bin/mkdir "${config[build_path]}"
+    @coreutils@/bin/touch "${config[config_path]}"/"${config[config_file]}"
   fi
 }
 InitCheck() {
   local count
-  count="$(find . -maxdepth 1 -type f -regextype egrep -regex '.*\.(info|build)' 2>/dev/null | wc -l)"
+  count="$(@findutils@/bin/find . -maxdepth 1 -type f -regextype egrep -regex '.*\.(info|build)' 2>/dev/null | @coreutils@/bin/wc -l)"
 
   if [ "$count" != 0 ]; then
     for file in *.info; do
@@ -67,7 +67,7 @@
   dirty_string="${dirty_string/#_/''}"
   clean_string="${dirty_string/%_/''}"
 
-  echo "$clean_string"
+  @coreutils@/bin/echo "$clean_string"
 }
 Log() {
   LogTerm "$1" "$2"
@@ -80,7 +80,7 @@
   local verbosity="${config[verbosity]^^}"
 
   DoLogTerm() {
-    echo "$term_log_type - $term_log_message"
+    @coreutils@/bin/echo "$term_log_type - $term_log_message"
   }
 
   case $term_log_type in
@@ -99,7 +99,7 @@
   local log_level="${config[log_level]^^}"
 
   DoLogFile() {
-    echo "[$(date '+%d/%b/%Y:%H:%M:%S.%3N')] ${file_log_type} - ${FUNCNAME[3]}: $file_log_message" >> "${config[log_path]}/${config[log_file]}"
+    @coreutils@/bin/echo "[$(@coreutils@/bin/date '+%d/%b/%Y:%H:%M:%S.%3N')] ${file_log_type} - ${FUNCNAME[3]}: $file_log_message" >> "${config[log_path]}/${config[log_file]}"
   }
 
   case $file_log_type in
@@ -113,9 +113,9 @@
 }
 ProcessBuildFile() {
   local files
-  mapfile -t files < <(grep -Ev '^\s*\#' "$1";)
+  mapfile -t files < <(@gnugrep@/bin/grep -Ev '^\s*\#' "$1";)
   for ((i=0;i<"${#files[*]}";i++));do
-    echo "${config[src_path]}${files[i]}"
+    @coreutils@/bin/echo "${config[src_path]}${files[i]}"
   done
 }
 BuildProject() {
@@ -126,7 +126,7 @@
 
   if [ ! -d "${config[build_path]}" ]; then
     Log warn "Configured build path '${config[build_path]}' not found, creating it..."
-    if mkdir -p "${config[build_path]}"; then
+    if @coreutils@/bin/mkdir -p "${config[build_path]}"; then
       Log info "Created missing build path '${config[build_path]}'"
     else
       Log error "Failed to create missing build path '${config[build_path]}'"
@@ -160,10 +160,10 @@
   Log debug "Paths are '${paths[*]}'"
 
   local files
-  mapfile -t files < <(for i in "${paths[@]}"; do find "$i" -type f; done)
+  mapfile -t files < <(for i in "${paths[@]}"; do @findutils@/bin/find "$i" -type f; done)
 
   local file_count
-  file_count="$(printf "%02d" "${#files[*]}")"
+  file_count="$(@coreutils@/bin/printf "%02d" "${#files[*]}")"
   Log debug "File count is '$file_count'"
 
   option="${option#?}"
@@ -194,9 +194,9 @@
 
     local file_counter
     for ((i=0;i<"${#files[*]}";i++));do
-      file_counter="$(printf "%02d" "$(( $i + 1 ))")"
+      file_counter="$(@coreutils@/bin/printf "%02d" "$(( $i + 1 ))")"
       Log info "Building script from source file ($file_counter/$file_count) '${files[$i]}'"
-      grep "$args" "$pattern" -- "${files[$i]}" >> "${config[build_path]}""$name" ||
+      @gnugrep@/bin/grep "$args" "$pattern" -- "${files[$i]}" >> "${config[build_path]}""$name" ||
         {
           Log error "Encountered error while building script from source file ($file_counter/$file_count) '${files[$i]}'"
           return 1
@@ -212,9 +212,9 @@
     done
     read -r -p "$(echo -e '\nPlease enter a description for the project. ')" init_description
     read -r -p "$(echo -e '\nWho is the project'\''s author? ')" init_author
-    echo -e '\nPlease select a license for the project:\n'
+    @coreutils@/bin/echo -e '\nPlease select a license for the project:\n'
     for ((i=1;i<"${#available_licenses[*]}";i++)); do
-      echo -e "  [$i] ${available_licenses[$i]}"
+      @coreutils@/bin/echo -e "  [$i] ${available_licenses[$i]}"
     done
     read -r -p "" init_license_num
     init_license=${available_licenses[$init_license_num]}
@@ -229,22 +229,22 @@
     local escaped_description
     escaped_description="${init_description//\'/\'\\\'\'}"
 
-    echo -e "projectName='$project_name'" > "${project_name,,}.info"
+    @coreutils@/bin/echo -e "projectName='$project_name'" > "${project_name,,}.info"
     {
-       echo -e "projectDescription='$escaped_description'"
-       echo -e "projectVersion=0.1.0"
-       echo -e "projectAuthor='$init_author'"
-       echo -e "projectLicense=$init_license"
+       @coreutils@/bin/echo -e "projectDescription='$escaped_description'"
+       @coreutils@/bin/echo -e "projectVersion=0.1.0"
+       @coreutils@/bin/echo -e "projectAuthor='$init_author'"
+       @coreutils@/bin/echo -e "projectLicense=$init_license"
     } >> "${project_name,,}.info"
 
-    echo -e "# Add build files to this file. One per line." > "${project_name,,}.build"
+    @coreutils@/bin/echo -e "# Add build files to this file. One per line." > "${project_name,,}.build"
   }
 
   local count
-  count="$(find . -maxdepth 1 -type f -regextype egrep -regex '.*\.(info|build)' 2>/dev/null | wc -l)"
+  count="$(@findutils@/bin/find . -maxdepth 1 -type f -regextype egrep -regex '.*\.(info|build)' 2>/dev/null | @coreutils@/bin/wc -l)"
 
   if [ "$count" != 0 ]; then
-    read -r -p "$(echo -e 'It looks like there is already another LINAC project in this directory! Are you sure you want to initialize a new project? (Y/n) ')" init_confirm
+    read -r -p "$(@coreutils@/bin/echo -e 'It looks like there is already another LINAC project in this directory! Are you sure you want to initialize a new project? (Y/n) ')" init_confirm
     case "$init_confirm" in
       [yY]|[Yy][Ee][Ss] ) GetInitInfo;;
       [Nn]|[Nn][Oo] ) exit 0;;
@@ -260,23 +260,23 @@
   local file="${projectName,,}.info"
 
   case "$part" in
-    major ) sed -E -i "s/$expression/echo \1\$((\2+1)).0.0/ge" "$file";;
-    minor ) sed -E -i "s/$expression/echo \1\2.\$((\3+1)).0/ge" "$file";;
-    patch ) sed -E -i "s/$expression/echo \1\2.\3.\$((\4+1))/ge" "$file";;
+    major ) @gnused@/bin/sed -E -i "s/$expression/echo \1\$((\2+1)).0.0/ge" "$file";;
+    minor ) @gnused@/bin/sed -E -i "s/$expression/echo \1\2.\$((\3+1)).0/ge" "$file";;
+    patch ) @gnused@/bin/sed -E -i "s/$expression/echo \1\2.\3.\$((\4+1))/ge" "$file";;
   esac
 }
 MakeStub() {
   local name="${projectName,,}"
 
-  echo '#!/bin/bash' > "${config[build_path]}$name"
+  @coreutils@/bin/echo '#!/bin/bash' > "${config[build_path]}$name"
   if [ -n "${config[shellcheck_ignore]}" ]; then
-    echo "# shellcheck disable=${config[shellcheck_ignore]}" >> "${config[build_path]}$name"
+    @coreutils@/bin/echo "# shellcheck disable=${config[shellcheck_ignore]}" >> "${config[build_path]}$name"
   fi
-  cat "$name"'.info' >> "${config[build_path]}$name"
+  @coreutils@/bin/cat "$name"'.info' >> "${config[build_path]}$name"
 }
 PrintInfo() {
-  echo -e "${projectName} ${projectVersion}"' - '"${projectDescription}"
-  echo -e 'Licensed '"${projectLicense}"' by '"${projectAuthor}\n"
+  @coreutils@/bin/echo -e "${projectName} ${projectVersion}"' - '"${projectDescription}"
+  @coreutils@/bin/echo -e 'Licensed '"${projectLicense}"' by '"${projectAuthor}\n"
 }
 SubInit() {
   InitProject
@@ -292,24 +292,24 @@
 SubHelp() {
     case "$@" in
       "build" )
-        echo "  Builds a project from the given file. The file must contain a list of source files from your configured"
-        echo "  source directory. (Source directory may be configured by defining 'src_path' in 'linac.conf')"
+        @coreutils@/bin/echo "  Builds a project from the given file. The file must contain a list of source files from your configured"
+        @coreutils@/bin/echo "  source directory. (Source directory may be configured by defining 'src_path' in 'linac.conf')"
       ;;
      "bump" )
-        echo "  Bumps the project version in the project info file. Takes a version number name as an option:"
-        echo "  One of either 'major','minor', or 'patch'. (Version must follow SemVer to be bumped, e.g. '2.3.1'.)"
+        @coreutils@/bin/echo "  Bumps the project version in the project info file. Takes a version number name as an option:"
+        @coreutils@/bin/echo "  One of either 'major','minor', or 'patch'. (Version must follow SemVer to be bumped, e.g. '2.3.1'.)"
       ;;
       "init" )
-        echo "  Initializes a new project in the current directory. Starts a wizard which asks for basic information"
-        echo "  about your project, then creates the necessary files and directories."
+        @coreutils@/bin/echo "  Initializes a new project in the current directory. Starts a wizard which asks for basic information"
+        @coreutils@/bin/echo "  about your project, then creates the necessary files and directories."
       ;;
       "help" )
-        echo  "  Shows a help message with basic usage information. Takes another command as an option and provides"
-        echo  "  additional information for that command. Did you really need help with 'help'?"
+        @coreutils@/bin/echo  "  Shows a help message with basic usage information. Takes another command as an option and provides"
+        @coreutils@/bin/echo  "  additional information for that command. Did you really need help with 'help'?"
       ;;
       * )
-        echo "Error: '$*' is not a known command."
-        echo "       Run 'linac help' for a list of known commands."
+        @coreutils@/bin/echo "Error: '$*' is not a known command."
+        @coreutils@/bin/echo "       Run 'linac help' for a list of known commands."
         exit 1
       ;;
     esac
@@ -320,17 +320,17 @@
     "" | "-h" | "--help" | "help" )
        shift
        local arg_count
-       arg_count=$(echo -n "$@" | wc -w)
+       arg_count=$(@coreutils@/bin/echo -n "$@" | @coreutils@/bin/wc -w)
 
        if [ "$arg_count" != 0 ]; then
          SubHelp "$@"
        else
-         echo 'Usage: linac <command> [options]'
-         echo "  Commands:"
-         echo "        help [command]           Shows this help. Takes another command as an option."
-         echo "        build [build file]       Builds project from the given file."
-         echo "        bump [version]           Bumps the project version. Accepts 'major','minor','patch'."
-         echo "        init                     Initializes a new project in the current directory."
+         @coreutils@/bin/echo 'Usage: linac <command> [options]'
+         @coreutils@/bin/echo "  Commands:"
+         @coreutils@/bin/echo "        help [command]           Shows this help. Takes another command as an option."
+         @coreutils@/bin/echo "        build [build file]       Builds project from the given file."
+         @coreutils@/bin/echo "        bump [version]           Bumps the project version. Accepts 'major','minor','patch'."
+         @coreutils@/bin/echo "        init                     Initializes a new project in the current directory."
        fi
       ;;
     * )
@@ -339,8 +339,8 @@
       Log debug "Shifted args"
       Log debug "Args are $*"
       if ! command -v Sub"${subcommand^}" > /dev/null; then
-        echo "Error: '$subcommand' is not a known command."
-        echo "       Run 'linac help' for a list of known commands."
+        @coreutils@/bin/echo "Error: '$subcommand' is not a known command."
+        @coreutils@/bin/echo "       Run 'linac help' for a list of known commands."
         exit 1
       else
         Sub"${subcommand^}" "$@"
